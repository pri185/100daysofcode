Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).
class MyStack {
public:
    MyStack() {
    
    }
        queue<int> q;
    void push(int x) {
       int size = q.size();
        q.push(x);
        for (int i=0;i<size; i++){
q.push(q.front());
q.pop();
  }

    }
    
    int pop() {
int ans = q.front();
q.pop();  
return ans;      
    }
    
    int top() {
      return  q.front();
    }
    
    bool empty() {
       return q.empty();
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */

There are n people in a line queuing to buy tickets, where the 0th person is at the front of the line and the (n - 1)th person is at the back of the line.

You are given a 0-indexed integer array tickets of length n where the number of tickets that the ith person would like to buy is tickets[i].

Each person takes exactly 1 second to buy a ticket. A person can only buy 1 ticket at a time and has to go back to the end of the line (which happens instantaneously) in order to buy more tickets. If a person does not have any tickets left to buy, the person will leave the line.

Return the time taken for the person at position k (0-indexed) to finish buying tickets.

class Solution {
public:
    int timeRequiredToBuy(vector<int>& tickets, int k) {
        int ithPerson =0;
        int timetaken =0;
        while(tickets[k] != 0){
            if(ithPerson == tickets.size()){
                ithPerson =0;
            }
            if(tickets[ithPerson]  == 0){
                ithPerson++;
                continue;
            }
            tickets[ithPerson]--;
            timetaken++;
            ithPerson++;
        }
        return timetaken;
    }
};
