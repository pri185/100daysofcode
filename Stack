You are given a string s consisting only of uppercase English letters.

You can apply some operations to this string where, in one operation, you can remove any occurrence of one of the substrings "AB" or "CD" from s.

Return the minimum possible length of the resulting string that you can obtain.

Note that the string concatenates after removing the substring and could produce new "AB" or "CD" substrings.[leetcode]




class Solution {
public:
    int minLength(string s) {
        int n=s.size();
        stack<char> stk;
        stk.push('#');
        for(int i=0; i<n; i++){
            stk.push(s[i]);

            if(stk.top()=='B'){
                stk.pop();
                if(stk.top()=='A') stk.pop();
                else stk.push('B');
            }

            else if(stk.top()=='D'){
                stk.pop();
                if(stk.top()=='C') stk.pop();
                else stk.push('D');
            }
        }
        return stk.size()-1;
    }
};


p/2)Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        for(char &ch:s)
        {
            if(ch=='(')
               st.push(')');
            else if(ch=='{')
               st.push('}');
            else if(ch=='[')
               st.push(']');
            else
            {
                if(st.empty() || ch!=st.top())
                   return false;
                else
                   st.pop();
            }
        }
        return st.empty();
    }
};
