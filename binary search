Given a positive integer num, return true if num is a perfect square or false otherwise.

A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.

You must not use any built-in library function, such as sqrt.

class Solution {
public:
    bool isPerfectSquare(int num) {

        if(num==1){

        return 1;
        }

        int start = 1;

        int end = num/2;

        while(start<=end){

            long long mid = start +(end-start)/2;

            if(mid * mid == num)

            return 1;

            else if(mid * mid > num)
            end = mid - 1;

            else start = mid + 1;
        }
        return 0;
    }
};

p/2
Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 < numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.
class Solution {
public:
    int search(int target,vector<int>&numbers,int start,int end)
    {
        while(start<=end){

            int mid = start+(end-start)/2;

            if(numbers[mid] > target){

            end = mid -1;
            }

            else if(numbers[mid] < target){
                start = mid+1;
            }
            else{
                return mid;
            }
        }
        return -1;
    }
    vector<int> twoSum(vector<int>&nums,int target) 
    {
        for(int i=0;i<nums.size();i++)
        {
            int j=search(target-nums[i],nums,i+1,nums.size()-1);
            if(j!=(-1))
                return {i+1,j+1};
        }
        return {-1,-1};
    }
};


P/2)
Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.

You must not use any built-in exponent function or operator.
class Solution {
public:
    long long int BinarySearch(int n){
        int s=0;
        int e = n;
       long long int mid = s+(e-s)/2;
       long long int ans =-1;
        while(s<=e){
            long long int square = mid * mid;
            if(square == n)
                return mid;
            
            if(square < n){
                ans = mid;
            s =mid+1;
        }
        else{
             e =mid-1;
        }
        mid = s+(e-s)/2;
        
    }
    return ans;
}
    int mySqrt(int x) {
        return BinarySearch(x);
        
    }
};

p/4)There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int pivot;
        int start = 0, end = nums.size()-1, mid = start + (end-start)/2;
        while (start < end) {
            if (nums[mid] >= nums[0]) {
                start = mid+1;
            }
            else {
                end = mid;
            }
            mid = start + (end-start)/2;
        }

        pivot = start;
        int ans = -1;
        if (target >= nums[pivot] && target <= nums[nums.size()-1]) {
            int s = pivot, e = nums.size()-1, m = s + (e-s)/2;

            while (s <= e) {
                if (target == nums[m]) {
                    ans = m;
                    return ans;
                }
                else if (target > nums[m]) {
                    s = m + 1;
                }
                else {
                    e = m - 1;
                }
                m = s + (e-s)/2;
            }
        }
        else {
            int s = 0, e = pivot-1, m = s + (e-s)/2;

            while (s <= e) {
                if (target == nums[m]) {
                    ans = m;
                    return ans;
                }
                else if (target > nums[m]) {
                    s = m + 1;
                }
                else {
                    e = m - 1;
                }
                m = s + (e-s)/2;
            }
        }
        return ans;
    }
};

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int pivot;
        int start = 0, end = nums.size()-1, mid = start + (end-start)/2;
        while (start < end) {
            if (nums[mid] >= nums[0]) {
                start = mid+1;
            }
            else {
                end = mid;
            }
            mid = start + (end-start)/2;
        }

        pivot = start;
        int ans = -1;
        if (target >= nums[pivot] && target <= nums[nums.size()-1]) {
            int s = pivot, e = nums.size()-1, m = s + (e-s)/2;

            while (s <= e) {
                if (target == nums[m]) {
                    ans = m;
                    return ans;
                }
                else if (target > nums[m]) {
                    s = m + 1;
                }
                else {
                    e = m - 1;
                }
                m = s + (e-s)/2;
            }
        }
        else {
            int s = 0, e = pivot-1, m = s + (e-s)/2;

            while (s <= e) {
                if (target == nums[m]) {
                    ans = m;
                    return ans;
                }
                else if (target > nums[m]) {
                    s = m + 1;
                }
                else {
                    e = m - 1;
                }
                m = s + (e-s)/2;
            }
        }
        return ans;
    }
};


Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int>ans;
        int i=0;
        int j=nums.size()-1;
        int mid=(i+j)/2;
        int left=-1;
        while(i<=j){
            if(nums[mid]==target){
                left=mid;
                j=mid-1;
            }
            else if(target>nums[mid]){
                i=mid+1;
            }
            else{
                j=mid-1;
            }
            mid=(i+j)/2;
        }
        i=0;
        j=nums.size()-1;
        int right=-1;
        while(i<=j){
            if(nums[mid]==target){
                right=mid;
                i=mid+1;
            }
            else if(target>nums[mid]){
                i=mid+1;
            }
            else{
                j=mid-1;
            }
            mid=(i+j)/2;
        }
        ans.push_back(left);
        ans.push_back(right);
        return ans;
    }
};


A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.

 class Solution {
public:
    int findPeakElement(const vector<int> &num) {
        int start = 0;
        int end = num.size()-1;
        while(start<end){
            int mid = (end+start)/2;
            if(num[mid]<num[mid+1]){
                start = mid+1;
            }
            else end = mid;
        }
        return start;
    }
};
