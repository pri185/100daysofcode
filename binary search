Given a positive integer num, return true if num is a perfect square or false otherwise.

A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.

You must not use any built-in library function, such as sqrt.

class Solution {
public:
    bool isPerfectSquare(int num) {

        if(num==1){

        return 1;
        }

        int start = 1;

        int end = num/2;

        while(start<=end){

            long long mid = start +(end-start)/2;

            if(mid * mid == num)

            return 1;

            else if(mid * mid > num)
            end = mid - 1;

            else start = mid + 1;
        }
        return 0;
    }
};

p/2
Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 < numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.
class Solution {
public:
    int search(int target,vector<int>&numbers,int start,int end)
    {
        while(start<=end){

            int mid = start+(end-start)/2;

            if(numbers[mid] > target){

            end = mid -1;
            }

            else if(numbers[mid] < target){
                start = mid+1;
            }
            else{
                return mid;
            }
        }
        return -1;
    }
    vector<int> twoSum(vector<int>&nums,int target) 
    {
        for(int i=0;i<nums.size();i++)
        {
            int j=search(target-nums[i],nums,i+1,nums.size()-1);
            if(j!=(-1))
                return {i+1,j+1};
        }
        return {-1,-1};
    }
};


P/2)
Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.

You must not use any built-in exponent function or operator.
class Solution {
public:
    long long int BinarySearch(int n){
        int s=0;
        int e = n;
       long long int mid = s+(e-s)/2;
       long long int ans =-1;
        while(s<=e){
            long long int square = mid * mid;
            if(square == n)
                return mid;
            
            if(square < n){
                ans = mid;
            s =mid+1;
        }
        else{
             e =mid-1;
        }
        mid = s+(e-s)/2;
        
    }
    return ans;
}
    int mySqrt(int x) {
        return BinarySearch(x);
        
    }
};
