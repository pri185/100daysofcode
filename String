For two strings s and t, we say "t divides s" if and only if s = t + ... + t (i.e., t is concatenated with itself one or more times).

Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.

 class Solution {
public:
    string gcdOfStrings(string str1, string str2) {
        return (str1 + str2 == str2 + str1)? 
        str1.substr(0, gcd(size(str1),size(str2))): "";
    }
};

(P/2)
Given a string s consisting of words and spaces, return the length of the last word in the string.

class Solution {
public:
    int lengthOfLastWord(string s) { 
        int len = 0, lastword = s.length() - 1;
        while (lastword >= 0 && s[lastword] == ' ') 
        lastword--;
        while (lastword >= 0 && s[lastword] != ' ') {
            len++;
            lastword--;
        }
        return len;
    }
};



(P/4)
The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

class Solution {
public:

    string convert(string s, int numRows) {
    
    if(numRows <= 1) return s;

    vector<string>v(numRows, ""); 

    int j = 0, dir = -1;

    for(int i = 0; i < s.length(); i++)
    {

        if(j == numRows - 1 || j == 0) dir *= (-1); 
		 
        v[j] += s[i];

        if(dir == 1) j++;

        else j--;
    }

    string res;

    for(auto &it : v) res += it; 

    return res;

    }
};

(P/5)
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.
class Solution {
public:
    int romanToInt(string s) {
         int temp=0;
        int n=s.length();
        int arr[n];
        for(int i=0; i<n; i++)
        {
            if(s[i]=='I')
            arr[i]= 1;
            else if(s[i]=='V')
            arr[i]= 5;
            else if(s[i]=='X')
            arr[i]= 10;
            else if(s[i]=='L')
            arr[i]= 50;
            else if(s[i]=='C')
            arr[i]= 100;
            else if(s[i]=='D')
            arr[i]=  500;
            else if(s[i]=='M')
            arr[i]= 1000;
        }
        
        for(int i=n-1; i>0; i--)
        {
            temp += arr[i];
            
            if(arr[i]>arr[i-1])
            temp -= 2*arr[i-1];   
        }
        temp += arr[0];
        return temp;
    }
};

P/6 -- medium
Given two strings s and part, perform the following operation on s until all occurrences of the substring part are removed:

Find the leftmost occurrence of the substring part and remove it from s.
Return s after removing all occurrences of part.

class Solution {
public:
    string removeOccurrences(string s, string part) {
        while(s.length()!=0 && s.find(part)<s.length()){
        s.erase(s.find(part),part.length());
        }
       return s;
    }
};
p/7You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        int n= digits.size();
        for(int i=n-1; i>=0; i--){
            if(digits[i]<9){
                digits[i]+=1;
                return digits;
            }
            else{
                digits[i]=0;
            }
        }
        digits[0]=1;
        digits.push_back(0);
        return digits;        
    }
};

p/8
Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).

The algorithm for myAtoi(string s) is as follows:

Read in and ignore any leading whitespace.
Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.
Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.
Convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).
If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.
Return the integer as the final result.


class Solution {
public:
    int myAtoi(string s) {
        stringstream str(s);
        int i = 0;
        str >> i;
        return i;
    }
};
class Solution {
public:
    int searchInsert(vector<int>& a, int k) {
        int n=a.size();
        
        if(k>a[n-1]) return n;
        
        int l=0, r=n-1;
        
        while(l<r){
            int m=l+(r-l)/2;
            
            if(a[m]>=k){
                r=m;
            }else{
                l=m+1;
            }
        }
        return l; // smallest index with value >= k
    }
};

Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.
class Solution {
public:
    string multiply(string num1, string num2) {

        if(num1=="0"||num2=="0")
            return "0";

        int carry=0;
        string product;
        int n1=num1.size()-1, n2=num2.size()-1;

        for(int i=0; i<=n1+n2 || carry; i++){

            for(int j=max(0,i-n2); j<=min(i,n1); j++){
                carry+=((num1[n1-j]-'0')*(num2[n2-i+j]-'0'));
            }

            product+=carry%10+'0';
            carry/=10;
        }

        reverse(begin(product),end(product));
        return product;

    }
};


p/10
You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

 class Solution (

 public:
 char findTheDifference(string s, string t){
sort(s.begin(), s.end()); 
sort(t.begin(), t.end());
 for(int i=0; i<s.length(); i++){
if(s[i]!=t[i]) 
return t[i];
}
 return t[t.length() - 1];
}
};


Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.

Each letter in magazine can only be used once in ransomNote.

 

class Solution 
public:
bool canConstruct(string ransomNote, string magazine) { sort(ransomNote.begin(), ransomNote.end()); sort(magazine.begin(), magazine.end());
int i=0, j=0;
while(i<ransomNote.length() && j<magazine.size())

if(ransomNote[i]==magazine[]])
{

i++; j++;
}
else if(ransomNote[i]>magazine[j])
{
j++;
else
return false;
}
return i= ransomNote.size();
