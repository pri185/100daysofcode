// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order. [LeetCode]

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] + nums[j] == target) {
                    return {i, j};
                }
            }
        }
        return {}; 
    }
};





(p/2)

There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.

Return a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.

class Solution {
public:
    vector<bool> kidsWithCandies(vector<int>& candies, int extraCandies) {
        vector<bool>result;
        int n = candies.size();
        int max = *max_element(candies.begin(), candies.end());
        //cout<<max;
        for(int i=0;i<n;i++){
            if(candies[i]+extraCandies>=max){
            result.push_back(true);
            }
        else{
             result.push_back(false);
        }
        }
        return result;
    }
};
(P/3)
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        set<vector<int>> set;
        vector<vector<int>> output;
        for(int i=0; i<n-2; i++){
            for(int j=i+1; j<n-1; j++){
                for(int k=j+1; k<n; k++){
                    if((nums[i] + nums[j] + nums[k] == 0) && i != j && j != k && k != i){
                        set.insert({nums[i], nums[j], nums[k]});
                    }
                }
            }
        }
        for(auto it : set){
            output.push_back(it);
        }
        return output;
    }
};

p/4

Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int>v1(nums.size(), 0), v2(nums.size(), 0);
        v1[0]=1;
        for(int i=1; i<nums.size(); i++){
            v1[i]=v1[i-1]*nums[i-1];
        }
        v2[nums.size()-1]=1;
        for(int i=nums.size()-2; i>=0; i--){
            v2[i]=v2[i+1]*nums[i+1];
        }
        for(int i=0; i<nums.size(); i++){
            nums[i]=v1[i]*v2[i];
        }
        return nums;
    }
};

