
Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

 

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        vector<int> temp(nums.size());
        for(int i=0; i<nums.size(); i++){
            temp[(i+k)%nums.size()] = nums[i];
            
        }
        nums = temp;
    }
};

here is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int pivot;
        int start = 0, end = nums.size()-1, mid = start + (end-start)/2;
        while (start < end) {
            if (nums[mid] >= nums[0]) {
                start = mid+1;
            }
            else {
                end = mid;
            }
            mid = start + (end-start)/2;
        }

        pivot = start;
        int ans = -1;
        if (target >= nums[pivot] && target <= nums[nums.size()-1]) {
            int s = pivot, e = nums.size()-1, m = s + (e-s)/2;

            while (s <= e) {
                if (target == nums[m]) {
                    ans = m;
                    return ans;
                }
                else if (target > nums[m]) {
                    s = m + 1;
                }
                else {
                    e = m - 1;
                }
                m = s + (e-s)/2;
            }
        }
        else {
            int s = 0, e = pivot-1, m = s + (e-s)/2;

            while (s <= e) {
                if (target == nums[m]){     
                    ans = m;
                    return ans;
                }
                else if (target > nums[m]) {
                    s = m + 1;
                }
                else {
                    e = m - 1;
                }
                m = s + (e-s)/2;
            }
        }
        return ans;
    }
};
