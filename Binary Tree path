Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
void traversal(TreeNode* root,vector<string>&ans,vector<int>&helper){
    if(root==NULL)return;
    if(root->left==NULL&&root->right==NULL){
        helper.push_back(root->val);
        string temp="";
        for(int i=0;i<helper.size()-1;i++){
          
            temp=temp+to_string(helper[i])+"->";
        }
        temp=temp+to_string(helper[helper.size()-1]);
        ans.push_back(temp);
        helper.pop_back();
        return;
    }
    helper.push_back(root->val);
    traversal(root->left,ans,helper);
   
      traversal(root->right,ans,helper);
       helper.pop_back();
}
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string>ans;
         vector<int>helper;
        traversal(root,ans,helper);
        return ans;
        
    }
};
