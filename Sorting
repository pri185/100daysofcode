Given an integer array nums containing distinct positive integers, find and return any number from the array that is neither the minimum nor the maximum value in the array, or -1 if there is no such number.
[leetcode]
class Solution {
public:
    int findNonMinOrMax(vector<int>& nums) {
        int mx = *max_element(nums.begin(),nums.end());
        int mn = *min_element(nums.begin(),nums.end());
        for(auto num: nums){
            if(num!=mx && num!=mn) return num;
        }
        return -1;
    }
};

(P/2)
Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 class Solution {
public:
    int majorityElement(vector<int>& arr) {
        int ele=arr[0];
        int count=0;
        for(int i=0;i<arr.size();i++){
            if(count==0)ele=arr[i];
            count+=(ele==arr[i])?1:-1;
        }
        return ele;
    }
};

(p/3)
Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        int count = 0, minmum = INT_MAX;
        string str;
        for(int i = 0; i < strs.size(); i++)
        {
            int len = strs[i].length();
            if(len < minmum){
                minmum = len;
                str = strs[i];
            }
        }
        for(int i = 0; i < minmum; i++)
        {
            for(int j = 0; j < strs.size(); j++)
            {
                if(strs[j][i] != str[i])
                    return str.substr(0, count);
            }
            count++;
        }
        return str.substr(0, count);
    }
};


(P/4)Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low=0;
        int high=nums.size()-1;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
                swap(nums[low],nums[i]);
                low++;
            }
        }
        for(int i=low;i<nums.size();i++){
            if(nums[i]==1){
                swap(nums[low],nums[i]);
                low++;
            }
        }
    }
};
