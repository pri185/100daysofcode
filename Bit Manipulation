 (P/1)Divide Two Integers
Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.

The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.

class Solution
{
public:
	int divide(int dividend, int divisor)
	{
		int result;
		//different cases:-
		if (dividend >= INT_MAX && divisor == 1)	
		result = INT_MAX;

		else if(dividend <= INT_MIN && divisor == 1)
		 result = INT_MIN;

		else if(dividend <= INT_MIN && divisor == -1) 
		result = abs(INT_MAX);

		else result  = dividend / divisor;
    	return result;
	}
};


Given two binary strings a and b, return their sum as a binary string.

Example 1:

Input: a = "11", b = "1"
Output: "100"

class Solution {
public:

string addBinary(string a, string b) { string result

int carry 0; int i.size() 1. Jb.size()-1; while (10|j6|| carry) ( int sum carry: if (10) ( 10 11 13- 14 15 sum bjl '0'; 18 19 21 22

sum a[i]-'0' if (j == 0) {

carry sum/2; result to string(sum 2);
reverse(result.begin(), result.end()); return result;


Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 class Solution (
 public:

int singleNumber(vector<int>& nums) {

int ans =0;

for (int i=0; i<nums.size(); i++){

ans = ans ^nums[i];

return ans;
}
};
